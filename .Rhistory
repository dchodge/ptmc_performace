load("/Users/davidhodgson/Dropbox/academia/PhD/ptmc/performance/data.RData")
knitr::opts_chunk$set(echo = TRUE)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
library(BayesianTools)
library("Rcpp")       # For c++ intergration
library("RcppEigen")  # Ditto
library("coda")  # Ditto
library("tidyverse")
library("ptmc")
library('socialmixr')
library(gridExtra)
source("./data/clean.R") # this is for cleaning if you wanted to try a different age range
no_chains <- 10
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave(p, "./figs/llog.pdf")
ggsave(p, "./figs/llog.pdf")
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave(p, "./figs/llog.pdf")
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llog.pdf", p)
lpAll <- bind_rows(lpMH, lpAM, lpDezs,  outPT$lpost)
lpAll_conv <- lpAll %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpAll, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = c(mcmc,chain_no)), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpAll_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = mcmc), size = 0.2, alpha=0.8) +
theme_minimal()
grid.arrange(p1, p2,  top="Parallel Tempering")
p1
p2
p2
outPT$lpost
lpAll
gelman.diag(outPT$mcmc)
gelman.plot(outPT$mcmc)
outPT$mcmc
ggplot(outPT$lpost, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = mcmc), size = 0.2, alpha=0.8) +
theme_minimal()
gelman.plot(outPT$mcmc)
ggsave("./figs/convPT.pdf", p)
ggsave("./figs/convPT.pdf", gelman.plot(outPT$mcmc))
l <- length(outDezs[[1]][[3]][[1]][,14])
lpDezs <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outDezs[[x]][[3]][[1]][,14]))))
lpDezs$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpDezs$sample_no <- rep(1:l,no_chains)
lpDezs$mcmc <- rep("Dezs", l*no_chains)
lpDezs_conv <- lpDezs %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpDezs, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpDezs_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
grid.arrange(p1, p2,  top="Differential Evolaution with snooker update")
ggsave("./figs/llogDE.pdf", p)
lpPT_conv <- outPT$lpost %>% filter(sample_no>round(15000/2))
p1 <- ggplot(outPT$lpost, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpPT_conv, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Parallel Tempering")
ggsave("./figs/llogPT.pdf", p)
l <- length(outDezs[[1]][[3]][[1]][,14])
lpDezs <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outDezs[[x]][[3]][[1]][,14]))))
lpDezs$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpDezs$sample_no <- rep(1:l,no_chains)
lpDezs$mcmc <- rep("Dezs", l*no_chains)
lpDezs_conv <- lpDezs %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpDezs, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpDezs_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Differential Evolaution with snooker update")
ggsave("./figs/llogDE.pdf", p)
l <- length(outAM[[1]]$chain[,14])
lpAM <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outAM[[x]]$chain[,14]))))
lpAM$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpAM$sample_no <- rep(1:l,no_chains)
lpAM$mcmc <- rep("AM", l*no_chains)
lpAM_conv <- lpAM %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpAM, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpAM_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Adaptive Metropolis-Hastings")
ggsave("./figs/llogAM.pdf", p)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
load("/Users/davidhodgson/Dropbox/academia/PhD/ptmc/performance/data.RData")
knitr::opts_chunk$set(echo = TRUE)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
library(BayesianTools)
library("Rcpp")       # For c++ intergration
library("RcppEigen")  # Ditto
library("coda")  # Ditto
library("tidyverse")
library("ptmc")
library('socialmixr')
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.066, 8.07))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
library(BayesianTools)
library("Rcpp")       # For c++ intergration
library("RcppEigen")  # Ditto
library("coda")  # Ditto
library("tidyverse")
library("ptmc")
library(gridExtra)
library('socialmixr')
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.066, 8.07))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.066, 8.7))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.7))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
l <- length(outAM[[1]]$chain[,14])
lpAM <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outAM[[x]]$chain[,14]))))
lpAM$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpAM$sample_no <- rep(1:l,no_chains)
lpAM$mcmc <- rep("AM", l*no_chains)
lpAM_conv <- lpAM %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpAM, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()
p2 <- ggplot(lpAM_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.7))
p <- grid.arrange(p1, p2,  top="Adaptive Metropolis-Hastings")
ggsave("./figs/llogAM.pdf", p)
l <- length(outDezs[[1]][[3]][[1]][,14])
lpDezs <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outDezs[[x]][[3]][[1]][,14]))))
lpDezs$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpDezs$sample_no <- rep(1:l,no_chains)
lpDezs$mcmc <- rep("Dezs", l*no_chains)
lpDezs_conv <- lpDezs %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpDezs, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpDezs_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.7))
p <- grid.arrange(p1, p2,  top="Differential Evolaution with snooker update")
ggsave("./figs/llogDE.pdf", p)
p
lpPT_conv <- outPT$lpost %>% filter(sample_no>round(15000/2))
p1 <- ggplot(outPT$lpost, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpPT_conv, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.7))
p <- grid.arrange(p1, p2,  top="Parallel Tempering")
ggsave("./figs/llogPT.pdf", p)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.1))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
l <- length(outAM[[1]]$chain[,14])
lpAM <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outAM[[x]]$chain[,14]))))
lpAM$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpAM$sample_no <- rep(1:l,no_chains)
lpAM$mcmc <- rep("AM", l*no_chains)
lpAM_conv <- lpAM %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpAM, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpAM_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.1))
p <- grid.arrange(p1, p2,  top="Adaptive Metropolis-Hastings")
ggsave("./figs/llogAM.pdf", p)
l <- length(outDezs[[1]][[3]][[1]][,14])
lpDezs <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outDezs[[x]][[3]][[1]][,14]))))
lpDezs$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpDezs$sample_no <- rep(1:l,no_chains)
lpDezs$mcmc <- rep("Dezs", l*no_chains)
lpDezs_conv <- lpDezs %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpDezs, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpDezs_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.1))
p <- grid.arrange(p1, p2,  top="Differential Evolaution with snooker update")
ggsave("./figs/llogDE.pdf", p)
lpPT_conv <- outPT$lpost %>% filter(sample_no>round(15000/2))
p1 <- ggplot(outPT$lpost, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpPT_conv, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8., 8.1))
p <- grid.arrange(p1, p2,  top="Parallel Tempering")
ggsave("./figs/llogPT.pdf", p)
l <- length(outMH[[1]]$chain[,14])
lpMH <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outMH[[x]]$chain[,14]))))
lpMH$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpMH$sample_no <- rep(1:l,no_chains)
lpMH$mcmc <- rep("Metropolis", l*no_chains)
lpMH_conv <- lpMH %>% filter(sample_no>round(l/2))
p1<- ggplot(lpMH, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2<- ggplot(lpMH_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.05, 8.1))
p <- grid.arrange(p1, p2,  top="Normal Metropolis-Hastings")
ggsave("./figs/llogMH.pdf", p)
l <- length(outAM[[1]]$chain[,14])
lpAM <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outAM[[x]]$chain[,14]))))
lpAM$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpAM$sample_no <- rep(1:l,no_chains)
lpAM$mcmc <- rep("AM", l*no_chains)
lpAM_conv <- lpAM %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpAM, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpAM_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.05, 8.1))
p <- grid.arrange(p1, p2,  top="Adaptive Metropolis-Hastings")
ggsave("./figs/llogAM.pdf", p)
l <- length(outDezs[[1]][[3]][[1]][,14])
lpDezs <- data.frame(loglike=log(-as.vector(sapply(c(1:no_chains), function(x) outDezs[[x]][[3]][[1]][,14]))))
lpDezs$chain_no <- as.vector(sapply(c(1:no_chains), function(x) rep(toString(x), l)))
lpDezs$sample_no <- rep(1:l,no_chains)
lpDezs$mcmc <- rep("Dezs", l*no_chains)
lpDezs_conv <- lpDezs %>% filter(sample_no>round(l/2))
p1 <- ggplot(lpDezs, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpDezs_conv, aes(x = sample_no, y = loglike)) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.05, 8.1))
p <- grid.arrange(p1, p2,  top="Differential Evolaution with snooker update")
ggsave("./figs/llogDE.pdf", p)
lpPT_conv <- outPT$lpost %>% filter(sample_no>round(15000/2))
p1 <- ggplot(outPT$lpost, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpPT_conv, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.05, 8.1))
p <- grid.arrange(p1, p2,  top="Parallel Tempering")
ggsave("./figs/llogPT.pdf", p)
rlogis(13, location = 0, scale = 1)
lpPT_conv <- outPT$lpost %>% filter(sample_no>round(10000/2))
p1 <- ggplot(outPT$lpost, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal()  +  scale_y_continuous(name="Log(-LogLikelihoood)")
p2 <- ggplot(lpPT_conv, aes(x = sample_no, y = log(-lpost))) +
geom_line(aes(color = chain_no), size = 0.2, alpha=0.8) +
theme_minimal() +  scale_y_continuous(name="Log(-LogLikelihoood)", limits=c(8.05, 8.1))
p <- grid.arrange(p1, p2,  top="Parallel Tempering")
ggsave("./figs/llogPT.pdf", p)
gelman.diag(outPT$mcmc)
